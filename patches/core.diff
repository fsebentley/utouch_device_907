diff --git a/system/core/init/property_service.c b/system/core/init/property_service.c
--- a/system/core/init/property_service.c
+++ b/system/core/init/property_service.c
@@ -77,6 +77,9 @@ struct {
     { "persist.radio",    AID_RADIO,    0 },
     { "net.dns",          AID_RADIO,    0 },
     { "sys.usb.config",   AID_RADIO,    0 },
+    { "mediasw.",         AID_MEDIA,    0 },
+    { "persist.mediasw.", AID_MEDIA,    0 },
+    { "audio.routing",    AID_SYSTEM,   0 },
     { "net.",             AID_SYSTEM,   0 },
     { "dev.",             AID_SYSTEM,   0 },
     { "runtime.",         AID_SYSTEM,   0 },
diff --git a/system/core/init/init.c b/system/core/init/init.c
--- a/system/core/init/init.c
+++ b/system/core/init/init.c
@@ -595,7 +595,8 @@ static int console_init_action(int nargs, char **args)
         have_console = 1;
     close(fd);

-    if( load_565rle_image(INIT_IMAGE_FILE) ) {
+    //if( load_565rle_image(INIT_IMAGE_FILE) ) {
+    if( load_argb8888_image(INIT_IMAGE_FILE) ) {
         fd = open("/dev/tty0", O_WRONLY);
         if (fd >= 0) {
             const char *msg;
diff --git a/system/core/init/init.h b/system/core/init/init.h
--- a/system/core/init/init.h
+++ b/system/core/init/init.h
@@ -137,6 +137,7 @@ void service_for_each_flags(unsigned matchflags,
 #define INIT_IMAGE_FILE  "/initlogo.rle"

 int load_565rle_image( char *file_name );
+int load_argb8888_image(char *fn);

 #ifdef HAVE_SELINUX
 extern struct selabel_handle *sehandle;
diff --git a/system/core/init/logo.c b/system/core/init/logo.c
--- a/system/core/init/logo.c
+++ b/system/core/init/logo.c
@@ -49,7 +49,8 @@ struct FB {

 #define fb_width(fb) ((fb)->vi.xres)
 #define fb_height(fb) ((fb)->vi.yres)
-#define fb_size(fb) ((fb)->vi.xres * (fb)->vi.yres * 2)
+#define fb_size(fb) ((fb)->vi.xres * (fb)->vi.yres * 4)
+//#define fb_size(fb) ((fb)->vi.xres * (fb)->vi.yres * 2)

 static int fb_open(struct FB *fb)
 {
@@ -163,3 +164,101 @@ int load_565rle_image(char *fn)
     return -1;
 }

+ int load_argb8888_image(char *fn)
+{
+    struct FB fb;
+    struct stat s;
+    unsigned long *data, *bits, *ptr;
+    unsigned long *lineptr;
+    unsigned long width;
+    unsigned long height;
+    unsigned long countw = 0;
+    unsigned long counth = 0;
+    unsigned long *linebits;
+    unsigned long fbsize;
+    int fd;
+
+    if (vt_set_mode(1)) 
+        return -1;
+
+    fd = open(fn, O_RDONLY);
+    if (fd < 0) {
+        ERROR("cannot open '%s'\n", fn);
+        goto fail_restore_text;
+    }
+
+    if (fstat(fd, &s) < 0) 
+    {
+        ERROR("fstat failed!\n");
+        goto fail_close_file;
+    }
+
+    data = mmap(0, s.st_size, PROT_READ, MAP_SHARED, fd, 0);
+    if (data == MAP_FAILED)
+    {
+        ERROR("MMAP failed!\n");
+        goto fail_close_file;
+    }
+
+    if (fb_open(&fb))
+    {
+        ERROR("FB_OPEN failed!\n");
+        goto fail_unmap_data;
+    }
+
+    width       = fb_width(&fb);
+    height      = fb_height(&fb);
+
+    fbsize      = width * height * 4;
+    ERROR("width = %d\n",width);
+    ERROR("height = %d\n",height);
+	ERROR("s.st_size = %d\n",s.st_size);
+    
+    if(fbsize != s.st_size)
+    {
+        ERROR("logo match failed!fbsize = %d\n",fbsize);
+
+        munmap(data, s.st_size);
+        fb_update(&fb);
+        fb_close(&fb);
+        close(fd);
+
+        return -1;
+    }
+    
+    counth      = height;
+    linebits    = fb.bits;
+    lineptr     = data;
+
+    while (counth > 0) 
+    {
+        bits    = linebits;
+        ptr     = lineptr;
+        countw  = width;
+        while(countw > 0)
+        {
+            *bits = *ptr;
+            ptr++;
+            bits++;
+            countw--;
+        }
+        linebits    += width;
+        lineptr     += width;
+        counth--;
+    }
+
+    munmap(data, s.st_size);
+    fb_update(&fb);
+    fb_close(&fb);
+    close(fd);
+    //unlink(fn);
+    return 0;
+
+fail_unmap_data:
+    munmap(data, s.st_size);    
+fail_close_file:
+    close(fd);
+fail_restore_text:
+    vt_set_mode(0);
+    return -1;
+}
